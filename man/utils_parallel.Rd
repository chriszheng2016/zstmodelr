% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-parallel.R
\name{utils_parallel}
\alias{utils_parallel}
\alias{enable_parallel}
\alias{disable_parallel}
\alias{parallel_status}
\title{Utils functions to control parallel process}
\usage{
enable_parallel(env_globals = .pkg_globals)

disable_parallel(env_globals = .pkg_globals)

parallel_status(env_globals = .pkg_globals)
}
\arguments{
\item{env_globals}{a environment with parallel process information.
Default .pkg_globals means to use global vars of the package. NULL means
to use environment of caller.}
}
\value{
\code{parallel_status} return a list containing parallel status, see details.
}
\description{
Control parallel process for parallel computation.
}
\details{
There are two levels of controlling parallel process for
computation:
\itemize{
\item Global level: enable/disable parallel process for R session.
Through \code{enable_parallel}, we could set parallel process ready for current R
session by initiating back-end clusters, which normally are processes running
on multiple cores  in a computer. we could shut parallel process by using
\code{disable_parallel}.
\item Function level: enable/disable parallel process for running functions. In a
R session enabling parallel process, we could control a function being able
to running parallel process, for example:
}\preformatted{        compute_indicator(ts_compute_vars, compute_fun, ...,
                  date_index_field = "stkcd"
                  c("date"), key_fields = NULL,
                  parallel = getOption("zstmodelr.common.parallel", TRUE))

}

Its argument \code{parallel} controls whether the function run in parallel process
or sequential process, whose default value is from options of
\code{zstmodelr.common.parallel} or TRUE.

In addition, \code{parallel_status} could provide current status of parallel
process and configuration options, which return a list including following
fields:
\itemize{
\item cluster: a object with class of c("SOCKcluster", "cluster") containing
information about back-end clusters for parallel process.
\item parallel_log: a path of parallel log file containing log info from parallel
process.
\item foreach_workers: a number of current process workers ready for foreach
computation.
\item zstmodelr.common.clusters: a number of clusters to be used for parallel
process.
}
\itemize{
\item zstmodelr.common.parallel: a logical as default value for parallel argument
of function with ability of parallel computation.
}
}
\section{Functions}{
\itemize{
\item \code{enable_parallel}: enable parallel process by initiating back-end
clusters.

\item \code{disable_parallel}: disable parallel process by stopping back-end
clusters.

\item \code{parallel_status}: get current status of parallel process.
}}

\examples{
\dontrun{

# Set clusters number of parallel process
options(zstmodelr.common.clusters = 4)

# Enable parallel process for the R session
enable_parallel()

# Inspect status of parallel process
parallel_status()

# Conduct parallel computation ...

# compute indicators by parallel process
ds_indicator <- compute_indicator(ds_vars,
  compute_fun = ind_def_fun,
  date_index_field = "date",
  key_fields = "stkcd"
)

# compute indicators by sequential process
ds_indicator <- compute_indicator(ds_vars,
  compute_fun = ind_def_fun,
  date_index_field = "date",
  key_fields = "stkcd",
  parallel = FALSE
)

# Disable parallel process for the R session
disable_parallel()
}
}
